
#include <iostream>
#include <vector>
using namespace std;

string daftarWarna[5] = {"Hitam", "Putih", "Merah", "Biru", "Abu-abu"};

class Petugas {
    private:
    string nama, id;

    public:
        void inputData(){
            cout << "\nMasukkan nama : ";
            cin >> ws; // Buang whitespace sisa (termasuk newline)
            getline(cin, nama);
            cout << "Masukkan ID : ";
            cin >> id;
        }

        void tampilData(){
            cout << "Nama Petugas : " << nama << endl;
            cout << "ID Petugas   : " << id << endl;
        }
};

struct Waktu {
    int jam;
    int menit;
    int detik;
};

struct Kendaraan {
    string plat;
    string merek;
    string warna;
    Waktu waktuMasuk;
    Waktu waktuKeluar;
    bool sudahKeluar = false; // Tambahan untuk pelacakan
};

// Fungsi untuk menampilkan waktu
void tampilkanWaktu(const Waktu& w) {
    cout << w.jam << ":" << w.menit << ":" << w.detik;
}

// Fungsi hitung durasi parkir (detik)
int hitungDurasi(const Waktu& masuk, const Waktu& keluar) {
    int detikMasuk = masuk.jam * 3600 + masuk.menit * 60 + masuk.detik;
    int detikKeluar = keluar.jam * 3600 + keluar.menit * 60 + keluar.detik;
    return detikKeluar - detikMasuk;
}

// Fungsi hitung biaya berdasarkan durasi
int hitungBiaya(int durasiDetik) {
    int durasiJam = (durasiDetik + 3599) / 3600; // Pembulatan ke atas
    if (durasiJam < 1) durasiJam = 1; // Minimal 1 jam
    return durasiJam * 2000;
}

// Fungsi untuk menambah kendaraan
void tambahKendaraan(vector<Kendaraan>& daftarKendaraan) {
    const int KAPASITAS_MAKSIMAL = 20; // Ubah dari 50 ke 20
    
    int kendaraanAktif = 0;
    for (const auto& k : daftarKendaraan) {
        if (!k.sudahKeluar) kendaraanAktif++;
    }

    if (kendaraanAktif >= KAPASITAS_MAKSIMAL) {
        cout << "\n==================================================================================\n";
        cout << "                              PARKIR PENUH!                                      \n";
        cout << "         Maaf, kapasitas parkir sudah penuh (" << KAPASITAS_MAKSIMAL << " kendaraan).\n";
        cout << "                    Silahkan coba lagi nanti.                                   \n";
        cout << "==================================================================================\n";
        return;
    }

    Kendaraan kendaraanBaru;

    cout << "\n==================================================================================\n";
    cout << "                            TAMBAH KENDARAAN BARU                                 \n";
    cout << "==================================================================================\n";

    cout << "Masukkan plat nomor  : ";
    cin >> kendaraanBaru.plat;

    for (const auto& k : daftarKendaraan) {
        if (k.plat == kendaraanBaru.plat && !k.sudahKeluar) {
            cout << "\nMaaf, kendaraan dengan plat " << kendaraanBaru.plat << " sudah ada di parkir!\n";
            return;
        }
    }

    cout << "Masukkan merek       : ";
    cin >> kendaraanBaru.merek;
    cout << "\nContoh warna kendaraan umum: ";
    for (int i = 0; i < 5; i++) {
        cout << daftarWarna[i] << (i < 4 ? ", " : "\n");
    }
    cout << "Masukkan warna       : \n";
    cin >> kendaraanBaru.warna;
    cout << "Masukkan waktu masuk (jam menit detik) : ";
    cin >> kendaraanBaru.waktuMasuk.jam >> kendaraanBaru.waktuMasuk.menit >> kendaraanBaru.waktuMasuk.detik;

    daftarKendaraan.push_back(kendaraanBaru);

    cout << "\n==================================================================================\n";
    cout << "                         KENDARAAN BERHASIL DITAMBAHKAN!                         \n";
    cout << "Plat : " << kendaraanBaru.plat << " | Merek : " << kendaraanBaru.merek << " | Warna : " << kendaraanBaru.warna << endl;
    cout << "Waktu masuk : ";
    tampilkanWaktu(kendaraanBaru.waktuMasuk);
    cout << "\nSisa tempat parkir : " << (KAPASITAS_MAKSIMAL - kendaraanAktif - 1) << " kendaraan" << endl;
    cout << "==================================================================================\n";
}

void tampilkanPointer(Kendaraan* k) {
    cout << "\n[Data via Pointer] Plat: " << k->plat 
         << " | Merek: " << k->merek 
         << " | Warna: " << k->warna << endl;
}

// Fungsi untuk hapus kendaraan berdasarkan plat
void hapusKendaraan(vector<Kendaraan>& daftarKendaraan) {
    if (daftarKendaraan.empty()) {
        cout << "\n==================================================================================\n";
        cout << "                           Belum ada kendaraan terdaftar.                        \n";
        cout << "==================================================================================\n";
        return;
    }
    
    string platHapus;
    cout << "\n==================================================================================\n";
    cout << "                              HAPUS KENDARAAN                                    \n";
    cout << "==================================================================================\n";
    cout << "Masukkan plat nomor kendaraan yang akan dihapus : ";
    cin >> platHapus;
    
    // Cari kendaraan berdasarkan plat
    for (auto it = daftarKendaraan.begin(); it != daftarKendaraan.end(); ++it) {
        if (it->plat == platHapus) {
            cout << "\n==================================================================================\n";
            cout << "                            KONFIRMASI PENGHAPUSAN                               \n";
            cout << "==================================================================================\n";
            cout << "Data kendaraan yang akan dihapus:" << endl;
            cout << "Plat Nomor : " << it->plat << endl;
            cout << "Merek      : " << it->merek << endl;
            cout << "Warna      : " << it->warna << endl;
            cout << "Waktu Masuk: ";
            tampilkanWaktu(it->waktuMasuk);
            cout << "\nStatus     : " << (it->sudahKeluar ? "Sudah Keluar" : "Masih Parkir") << endl;
            
            char konfirmasi;
            cout << "\nApakah Anda yakin ingin menghapus data ini? (y/n): ";
            cin >> konfirmasi;
            
            if (konfirmasi == 'y' || konfirmasi == 'Y') {
                daftarKendaraan.erase(it);
                cout << "\n==================================================================================\n";
                cout << "                         DATA KENDARAAN BERHASIL DIHAPUS!                        \n";
                cout << "               Kendaraan dengan plat " << platHapus << " telah dihapus dari sistem.              \n";
                cout << "==================================================================================\n";
            } else {
                cout << "\n==================================================================================\n";
                cout << "                           PENGHAPUSAN DIBATALKAN                                \n";
                cout << "==================================================================================\n";
            }
            return;
        }
    }
    
    cout << "\n==================================================================================\n";
    cout << "            Kendaraan dengan plat " << platHapus << " tidak ditemukan!                     \n";
    cout << "==================================================================================\n";
}


// Fungsi pembayaran
void pembayaran(vector<Kendaraan>& daftarKendaraan) {
    if (daftarKendaraan.empty()) {
        cout << "\n==================================================================================\n";
        cout << "                           Belum ada kendaraan terdaftar.                        \n";
        cout << "==================================================================================\n";
        return;
    }

    string platKeluar;
    cout << "\n==================================================================================\n";
    cout << "                                  PEMBAYARAN                                     \n";
    cout << "==================================================================================\n";
    cout << "Masukkan plat nomor kendaraan yang akan keluar : ";
    cin >> platKeluar;

    for (auto& k : daftarKendaraan) {
        if (k.plat == platKeluar && !k.sudahKeluar) {
            cout << "Masukkan waktu keluar (jam menit detik) : ";
            cin >> k.waktuKeluar.jam >> k.waktuKeluar.menit >> k.waktuKeluar.detik;

            k.sudahKeluar = true;

            int durasiDetik = hitungDurasi(k.waktuMasuk, k.waktuKeluar);
            int biaya = hitungBiaya(durasiDetik);
            int jam = durasiDetik / 3600;
            int menit = (durasiDetik % 3600) / 60;

            cout << "\n==================================================================================\n";
            cout << "                               DETAIL PEMBAYARAN                                 \n";
            cout << "==================================================================================\n";
            cout << "Plat Nomor      : " << k.plat << endl;
            cout << "Merek           : " << k.merek << endl;
            cout << "Warna           : " << k.warna << endl;
            cout << "Waktu Masuk     : ";
            tampilkanWaktu(k.waktuMasuk);
            cout << "\nWaktu Keluar    : ";
            tampilkanWaktu(k.waktuKeluar);
            cout << "\nDurasi Parkir   : " << jam << " jam " << menit << " menit" << endl;
            cout << "Tarif           : Rp 2.000/jam (minimal 1 jam)" << endl;
            cout << "Total Biaya     : Rp " << biaya << endl;
            cout << "==================================================================================\n";
            cout << "                            TERIMA KASIH ATAS KUNJUNGAN!                         \n";
            cout << "                                HATI-HATI DI JALAN                              \n";
            cout << "==================================================================================\n";
            return;
        }
    }

    cout << "\n==================================================================================\n";
    cout << "         Kendaraan dengan plat " << platKeluar << " tidak ditemukan atau sudah keluar!         \n";
    cout << "==================================================================================\n";
}

// Tambahkan main program loop
int main() {
    Petugas p;
    vector<Kendaraan> daftarKendaraan;
    int pilihan;

    cout<<"==================================================================================\n";
    cout<<"--------------------------- S E L A M A T  D A T A N G --------------------------- \n";
    cout <<"                           DI PORTAL PARKIR KHUSUS MOBIL       \n";
    cout<<"                                   MAL PRIENAL \n";
    cout<<"==================================================================================\n";
    cout<<"\nKami senang anda telah hadir.\n";
    cout<<"Sebelum melanjutkan, silahkan masukkan informasi Anda yang akan bertugas hari ini.\n";
    p.inputData();
    cout<<"==================================================================================\n";
    p.tampilData();
    cout << "\n                           TERIMAKASIH ATAS KERJASAMANYA !\n";
    cout << "-------------------------- S E L A M A T  B E R T U G A S ------------------------- \n";

    do {
        cout << "\nSilahkan input opsi berikut dalam bentuk angka.\n";
        cout << "1. Tambahkan Daftar Kendaraan\n";
        cout << "2. Hapus Daftar Kendaraan\n";
        cout << "3. Tampilkan Daftar Kendaraan\n";
        cout << "4. Pembayaran\n";
        cout << "5. Keluar Program\n";
        cout << "Masukkan opsi : ";
        cin >> pilihan;

       switch (pilihan) {
        case 1:
            tambahKendaraan(daftarKendaraan);
            break;

        case 2:
            hapusKendaraan(daftarKendaraan);
            break;

        case 3:
            if (daftarKendaraan.empty()) {
                cout << "\nBelum ada kendaraan yang parkir.\n";
            } else {
                cout << "\nDAFTAR KENDARAAN TERPARKIR:\n";
                for (size_t i = 0; i < daftarKendaraan.size(); i++) {
                    if (!daftarKendaraan[i].sudahKeluar) {
                        cout << "\nKendaraan ke-" << i + 1 << endl;
                        cout << "Plat   : " << daftarKendaraan[i].plat << endl;
                        cout << "Merek  : " << daftarKendaraan[i].merek << endl;
                        cout << "Warna  : " << daftarKendaraan[i].warna << endl;
                        cout << "Masuk  : ";
                        tampilkanWaktu(daftarKendaraan[i].waktuMasuk);
                        tampilkanPointer(&daftarKendaraan[i]); // <- Ini pemakaian pointer

                        cout << endl;
                    }
                }
            }
            break;

        case 4:
            pembayaran(daftarKendaraan);
            break;

        case 5:
            cout << "\nTerima kasih. Program selesai.\n";
            break;

        default:
            cout << "Pilihan tidak valid.\n";
            break;
    }

} while (pilihan != 5);}
   

   
